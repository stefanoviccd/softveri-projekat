/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.ac.bg.fon.ps.bibliotekaklijent.view;

import rs.ac.bg.fon.ps.biblioteka.model.Author;
import rs.ac.bg.fon.ps.biblioteka.model.BookCategory;
import rs.ac.bg.fon.ps.biblioteka.model.Book;
import rs.ac.bg.fon.ps.bibliotekaklijent.validation.ValidationException;
import rs.ac.bg.fon.ps.bibliotekaklijent.validation.Validator;
import rs.ac.bg.fon.ps.bibliotekaklijent.view.tableModel.TableModelBook;
import java.awt.Frame;
import java.util.List;
import javax.swing.JOptionPane;
import rs.ac.bg.fon.ps.biblioteka.bibilotekaklijent.controller.ControllerUI;

/**
 *
 * @author Dragana Stefanovic
 */
public class FrmBooks extends javax.swing.JDialog {

    /**
     * Creates new form FrmPretragaKnjiga
     */
    public FrmBooks(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setTitle("Knjige");
        FrameCenter.CenteredFrame(this);
        try {
            prepareView();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greška pri inicijalizaciji" + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnPrikaziSve = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cmbAutor = new javax.swing.JComboBox();
        btnPretraziAutor = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        cmbKategorija = new javax.swing.JComboBox();
        btnPretraziKategorija = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtNaziv = new javax.swing.JTextField();
        cmbPretraziNaziv = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblKnjige = new javax.swing.JTable();
        btnUcitaj = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnPrikaziSve.setText("Prikaži sve");
        btnPrikaziSve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrikaziSveActionPerformed(evt);
            }
        });

        jLabel1.setText("Pretraga prema autoru:");

        btnPretraziAutor.setText("Pretraži");
        btnPretraziAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziAutorActionPerformed(evt);
            }
        });

        jLabel2.setText("Pretraga prema kategoriji:");

        btnPretraziKategorija.setText("Pretraži");
        btnPretraziKategorija.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPretraziKategorijaActionPerformed(evt);
            }
        });

        jLabel3.setText("Pretraga prema nazivu:");

        cmbPretraziNaziv.setText("Pretraži");
        cmbPretraziNaziv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPretraziNazivActionPerformed(evt);
            }
        });

        tblKnjige.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblKnjige);

        btnUcitaj.setText("Učitaj");
        btnUcitaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUcitajActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnUcitaj, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(36, 36, 36)
                                .addComponent(cmbAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(btnPretraziAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(36, 36, 36))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbKategorija, 0, 175, Short.MAX_VALUE)
                                    .addComponent(txtNaziv))
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnPretraziKategorija, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbPretraziNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(162, 162, 162)
                        .addComponent(btnPrikaziSve, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrikaziSve)
                    .addComponent(jLabel1)
                    .addComponent(cmbAutor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPretraziAutor))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbKategorija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPretraziKategorija))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNaziv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbPretraziNaziv))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(btnUcitaj)
                .addContainerGap(100, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrikaziSveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrikaziSveActionPerformed
        List<Book> books;
        try {
            books = ControllerUI.getInstance().getBooks();
            ((TableModelBook) tblKnjige.getModel()).setKnjige(books);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }


    }//GEN-LAST:event_btnPrikaziSveActionPerformed

    private void btnUcitajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUcitajActionPerformed
        int selectedrow = tblKnjige.getSelectedRow();
        if (selectedrow == -1) {
            return;
        }
        Book k = ((TableModelBook) tblKnjige.getModel()).getKnjiga(selectedrow);
        FrmLoadBook frm = new FrmLoadBook((Frame) this.getParent(), true, k);
        frm.setTabelaKnjiga(this.tblKnjige);
        frm.setCmbAuthors(this.cmbAutor);
        frm.setVisible(true);


    }//GEN-LAST:event_btnUcitajActionPerformed

    private void btnPretraziAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziAutorActionPerformed
        Author author = (Author) cmbAutor.getSelectedItem();
        try {
            if(author==null) return;
            //String query = "SELECT * FROM knjiga WHERE pisacid=" + author.getAuthorId();
            String query = " WHERE k.pisacid=" + author.getAuthorId();
            List<Book> books = ControllerUI.getInstance().getBooksByQuery(query);
            if (books.size() == 0) {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da pronadje knjige po zadatoj vrednosti!", "Greska", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Sistem je pronašao knjige po zadatoj vrednosti!");
            }

            ((TableModelBook) tblKnjige.getModel()).setKnjige(books);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btnPretraziAutorActionPerformed

    private void btnPretraziKategorijaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPretraziKategorijaActionPerformed
        BookCategory category = (BookCategory) cmbKategorija.getSelectedItem();
        try {
            Long kategorijaId = ControllerUI.getInstance().getBookCategoryId(category);

            //String query = "SELECT * FROM knjiga WHERE kategorijaid=" + kategorijaId;
            String query = " WHERE k.kategorijaid=" + kategorijaId;
            List<Book> knjige = (List<Book>) ControllerUI.getInstance().getBooksByQuery(query);
            if (knjige.size() == 0) {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da pronadje knjige po zadatoj vrednosti!", "Greska", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Sistem je pronašao knjige po zadatoj vrednosti!");
            }

            ((TableModelBook) tblKnjige.getModel()).setKnjige(knjige);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }
    }//GEN-LAST:event_btnPretraziKategorijaActionPerformed

    private void cmbPretraziNazivActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPretraziNazivActionPerformed

        try {
            validateInput();
           // String query = "SELECT * FROM knjiga WHERE naziv='" + txtNaziv.getText().trim() + "'";
            String query = " WHERE k.naziv='" + txtNaziv.getText().trim() + "'";
            List<Book> knjige = (List<Book>) ControllerUI.getInstance().getBooksByQuery(query);
            if (knjige.size() == 0) {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da pronadje knjige po zadatoj vrednosti!", "Greska", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Sistem je pronašao knjige po zadatoj vrednosti!");
            }

            ((TableModelBook) tblKnjige.getModel()).setKnjige(knjige);

        } catch (ValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_cmbPretraziNazivActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmBooks.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmBooks.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmBooks.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmBooks.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FrmBooks dialog = new FrmBooks(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPretraziAutor;
    private javax.swing.JButton btnPretraziKategorija;
    private javax.swing.JButton btnPrikaziSve;
    private javax.swing.JButton btnUcitaj;
    private javax.swing.JComboBox cmbAutor;
    private javax.swing.JComboBox cmbKategorija;
    private javax.swing.JButton cmbPretraziNaziv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblKnjige;
    private javax.swing.JTextField txtNaziv;
    // End of variables declaration//GEN-END:variables

    private void prepareView() throws Exception {
        loadAuthors();
        loadBookCategories();
        formatTable();
    }

    private void loadAuthors() throws Exception {
        List<Author> authors = ControllerUI.getInstance().getAuthors();
        for (Author autor : authors) {
            cmbAutor.addItem(autor);

        }
    }

    private void loadBookCategories() throws Exception {
        BookCategory[] kategorije = (BookCategory[]) ControllerUI.getInstance().getBookCategories();
        for (BookCategory kategorijaKnjiga : kategorije) {
            cmbKategorija.addItem(kategorijaKnjiga);
        }

    }

    private void formatTable() throws Exception {
        List<Book> knjige = loadBooks();
        TableModelBook tm = new TableModelBook(knjige);
        tblKnjige.setModel(tm);

    }

    private List<Book> loadBooks() throws Exception {
        List<Book> books = ControllerUI.getInstance().getBooks();
        return books;

    }

    private void validateInput() throws ValidationException {
        Validator.startValidation().validateNotNullOrEmpty(txtNaziv.getText(), "Unesite vrednost pretrage!").throwIfInvalide();
    }

}
